@startuml
' Renovatio Architecture - MCP Server and Core Engine Separation

title Renovatio Platform - Modular Architecture

' External clients
actor "MCP Clients\n(VS Code, etc.)" as mcp_clients
actor "Library Users\n(Direct Usage)" as lib_users

' Main application modules
package "Application Layer" {
  [renovatio-mcp-server] as mcp_server #LightBlue
  [renovatio-agent] as agent #LightYellow
  [renovatio-client] as client #LightGray
}

' Core engine (protocol-agnostic)
package "Core Engine (Protocol-Agnostic)" {
  [renovatio-core] as core #Orange
  [renovatio-shared] as shared #LightCyan
}

' Language providers (pluggable modules)
package "Language Providers" {
  [renovatio-provider-java] as java_provider #LightPink
  [renovatio-provider-cobol] as cobol_provider #LightPink
  [renovatio-provider-jcl] as jcl_provider #LightPink
}

' Client connections
mcp_clients --> mcp_server : JSON-RPC 2.0\n(MCP Protocol)
lib_users --> core : Direct Calls

' Application layer dependencies
mcp_server --> core : Uses Pure Engine
agent --> core : Orchestration
client ..> core : Consumes API

' Core engine structure
core --> shared : Uses Models/Contracts
core --> java_provider : Language Support
core --> cobol_provider : Language Support
core --> jcl_provider : Language Support

' Provider dependencies
java_provider --> shared : Implements Interfaces
cobol_provider --> shared : Implements Interfaces
jcl_provider --> shared : Implements Interfaces

' Cross-module usage
agent --> java_provider : Direct Access
agent --> cobol_provider : Direct Access
agent --> jcl_provider : Direct Access

note top of mcp_server
  **MCP Server**
  - Full MCP 2025-06-18 compliance
  - Serves on root path "/"
  - JSON-RPC 2.0 protocol
  - Zero business logic
end note

note top of core
  **Pure Engine**
  - Protocol-agnostic
  - Zero MCP dependencies
  - Can be used as library
  - Language provider registry
end note

note bottom of java_provider
  **Language Providers**
  - Pluggable modules
  - Language-specific implementations
  - Java: OpenRewrite
  - COBOL: ANTLR4 + Migration
  - JCL: Parser + Conversion
end note

@enduml
