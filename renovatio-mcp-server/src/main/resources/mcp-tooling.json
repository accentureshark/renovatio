{
  "spec": "2024-11-05",
  "server": {
    "name": "renovatio-mcp-server",
    "version": "0.0.1-SNAPSHOT",
    "description": "Renovatio Multi-Language Refactoring Platform with MCP support"
  },
  "capabilities": {
    "tools": {
      "listChanged": true
    },
    "resources": {
      "subscribe": true,
      "listChanged": true
    },
    "prompts": {
      "listChanged": true
    },
    "logging": {}
  },
  "tools": [
    {
      "name": "java_analyze",
      "description": "Comprehensive Java code analysis tool that extracts detailed information about Java projects. Analyzes code structure, identifies classes, methods, fields, imports, and provides architectural insights. Use this tool when you need to understand the structure and components of a Java codebase, analyze dependencies, or get an overview of a Java project's architecture. Returns detailed information about classes found, method signatures, package structure, and dependency relationships.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Absolute path to the Java project directory or workspace that contains .java files to analyze. Example: '/home/user/my-java-project' or '/path/to/java/source/code'"
          },
          "nql": {
            "type": "string",
            "description": "Natural Query Language expression for specific analysis requirements (optional). Examples: 'find all classes', 'analyze dependencies', 'extract method signatures'",
            "default": "analyze java code structure and extract all components"
          },
          "scope": {
            "type": "string",
            "description": "Scope filter to limit analysis to specific packages or directories (optional). Example: 'com.example.service' or 'src/main/java/controllers'"
          }
        },
        "required": ["workspacePath"]
      }
    },
    {
      "name": "java_metrics",
      "description": "Advanced Java code metrics calculator that provides comprehensive quality and complexity measurements for Java projects. Calculates lines of code, cyclomatic complexity, maintainability scores, class/method counts, and code quality indicators. Use this tool when you need to assess code quality, measure technical debt, generate development reports, or understand the size and complexity of a Java codebase. Perfect for code reviews, architecture assessments, and project planning.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Absolute path to the Java project directory containing .java files to measure. The tool will recursively analyze all Java files in this directory and subdirectories. Example: '/home/user/my-java-project' or '/path/to/source/code'"
          },
          "scope": {
            "type": "string",
            "description": "Optional scope filter to limit metrics calculation to specific packages, directories, or file patterns. Examples: 'com.example.service', 'src/main/java', '**/*Service.java'"
          }
        },
        "required": ["workspacePath"]
      }
    },
    {
      "name": "java_plan",
      "description": "Create refactoring and transformation plans for Java code",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Path to the Java project workspace"
          },
          "nql": {
            "type": "string",
            "description": "Natural Query Language expression describing the refactoring goal"
          },
          "scope": {
            "type": "string",
            "description": "Scope filter for planning (optional)"
          }
        },
        "required": ["workspacePath", "nql"]
      }
    },
    {
      "name": "java_apply",
      "description": "Apply transformation plans to Java code",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Path to the Java project workspace"
          },
          "planId": {
            "type": "string",
            "description": "ID of the transformation plan to apply"
          },
          "dryRun": {
            "type": "boolean",
            "description": "Whether to perform a dry run without making changes",
            "default": true
          }
        },
        "required": ["workspacePath", "planId"]
      }
    },
    {
      "name": "java_diff",
      "description": "Generate semantic diffs for Java code changes",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Path to the Java project workspace"
          },
          "runId": {
            "type": "string",
            "description": "ID of the analysis run to diff against"
          }
        },
        "required": ["workspacePath", "runId"]
      }
    },
    {
      "name": "cobol_analyze",
      "description": "Analyze COBOL code structure and extract program information",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Path to the COBOL project workspace to analyze"
          },
          "nql": {
            "type": "string",
            "description": "Natural Query Language expression for analysis (optional)",
            "default": "analyze cobol code structure"
          }
        },
        "required": ["workspacePath"]
      }
    },
    {
      "name": "cobol_metrics",
      "description": "Calculate code metrics for COBOL programs",
      "inputSchema": {
        "type": "object",
        "properties": {
          "workspacePath": {
            "type": "string",
            "description": "Path to the COBOL project workspace"
          }
        },
        "required": ["workspacePath"]
      }
    },
    {
      "name": "nql_.compile",
      "description": "Compile natural language queries to NQL (Natural Query Language)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "Natural language question to compile to NQL"
          },
          "context": {
            "type": "string",
            "description": "Additional context for the compilation (optional)"
          }
        },
        "required": ["question"]
      }
    },
    {
      "name": "common_index",
      "description": "Index repository for search and analysis",
      "inputSchema": {
        "type": "object",
        "properties": {
          "repoId": {
            "type": "string",
            "description": "Repository ID to index"
          }
        },
        "required": ["repoId"]
      }
    },
    {
      "name": "common_search",
      "description": "Search indexed repository content",
      "inputSchema": {
        "type": "object",
        "properties": {
          "repoId": {
            "type": "string",
            "description": "Repository ID to search"
          },
          "query": {
            "type": "string",
            "description": "Search query"
          },
          "path": {
            "type": "string",
            "description": "Path filter for search (optional)"
          }
        },
        "required": ["repoId", "query"]
      }
    }
  ]
}
